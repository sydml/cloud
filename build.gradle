group = 'com.sydml'
version = '0.0.1-SNAPSHOT'

buildscript {
    ext {
        springBootVersion = "2.1.3.RELEASE"
        springCloudVersion = "Greenwich.SR1"
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

configure(allprojects.findAll { it.subprojects.empty }) {
    //Java
    apply plugin: "java"

    //IDE
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
//        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    test {
        exclude "**/*"
    }
    ext {
        jaxbApiVersion = "2.3.1"
        jaxbImplVersion = "2.1.2"
        lombokVersion = "1.18.6"
    }

    dependencies{
        //JavaEE
        compile ("javax.xml.bind:jaxb-api:${jaxbApiVersion}")
        compile ("com.sun.xml.bind:jaxb-impl:${jaxbImplVersion}")
        // Lombok
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    }
}

configure(subprojects.findAll { it.subprojects.empty && it.name.endsWith("-service")  && !it.name.startsWith("gateway-")}) {
    ext {
        commonPoolVersion = "2.5.0"
        mysqlConnectionVersion = "8.0.11"
        duridVersion = "1.1.10"
        poiVersion = "3.12"
        opencsvVserion = "4.5"
        springRetryVersion = "1.2.4.RELEASE"
        aspectWeaverVersion = "1.8.13"
        javaxVersion = "2.1"
        jerseyServer = "2.25.1"
        pageHelperVersion = "1.2.10"
        mybatisVersion = "2.0.0"
    }
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }
    bootJar {
        project.name
    }
    dependencies {
        compile project(":common:common-base")
        compile("org.apache.commons:commons-pool2:${commonPoolVersion}")
        compile("mysql:mysql-connector-java:${mysqlConnectionVersion}")
        compile("com.alibaba:druid-spring-boot-starter:${duridVersion}")
        compile("org.apache.poi:poi-ooxml:${poiVersion}")
        compile("com.opencsv:opencsv:${opencsvVserion}")
        compile("javax.ws.rs:javax.ws.rs-api:${javaxVersion}")
        compile("org.glassfish.jersey.core:jersey-server:${jerseyServer}")
        compile("org.springframework.retry:spring-retry:${springRetryVersion}")
        compile("com.github.pagehelper:pagehelper-spring-boot-starter:${pageHelperVersion}")
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}")

        // spring-boot
        runtime("org.springframework.boot:spring-boot-devtools")
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-jersey")


        //cloud
        // Eureka-client
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        // hystrix断路器
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")
        // 配置服务链路追踪
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    }
}

configure(subprojects.findAll { it.subprojects.empty && it.name.startsWith("platform-")}) {
    ext {

    }
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }
    bootJar {
        project.name
    }
    dependencies {
        compile("org.springframework.boot:spring-boot-starter-actuator")
        // Eureka server
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
    }
}

//configure(subprojects.findAll { it.subprojects.empty && it.name.startsWith("gateway-") }) {
//    ext {
//
//    }
//    apply plugin: "org.springframework.boot"
//    apply plugin: "io.spring.dependency-management"
//    dependencyManagement {
//        imports {
//            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
//            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
//        }
//    }
//    bootJar {
//        project.name
//    }
//    dependencies {
//        compile("org.springframework.boot:spring-boot-starter-data-redis-reactive")
//        runtime("org.springframework.boot:spring-boot-devtools")
//        compile("org.springframework.boot:spring-boot-starter-actuator")
//        testCompile("org.springframework.boot:spring-boot-starter-test")
//        // Eureka server
//        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
//        compile("org.springframework.cloud:spring-cloud-starter-gateway")
//    }
//}

